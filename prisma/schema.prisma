// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                     String     @id @unique
  name                   String
  email                  String     @unique
  password               String
  dateOfBirth            DateTime
  gender                 Gender
  madyamikYear           Int
  higherSecondaryYear    Int
  mobile                 Int
  whatsappNumber         Int
  role                   Role
  membership             String
  presentLocationAddress String
  contactLocationAddress String
  occupation             String
  createdAt              DateTime?  @default(now())
  updatedAt              DateTime?  @updatedAt
  Events                 Events?    @relation(fields: [eventsId], references: [id])
  refreshToken           String?
  eventsId               String?
  Attendee               Attendee[]
}

model DonationPage {
  id              String         @id @unique @default(uuid())
  title           String
  slug            String         @unique
  description     String
  thumbnail       String
  listOfDonors    Donation[]
  targetAmount    Int
  collectedAmount Int?           @default(0)
  expirationDate  DateTime
  status          DonationStatus @default(ACTIVE)
  createdAt       DateTime?      @default(now())
  updatedAt       DateTime?      @updatedAt
}

model Donation {
  id                  String         @id @unique @default(uuid())
  firstName           String
  lastName            String
  email               String
  whatsappNumber      String
  alternativeNumber   String
  dateOfBirth         DateTime
  gender              Gender
  madyamikYear        Int
  higherSecondaryYear Int
  presentAddress      String
  contactAddress      String
  occupation          String
  amount              Int
  paymentStatus       PaymentStatus? @default(PROCESSING)
  donationPageId      String?
  DonationPage        DonationPage?   @relation(fields: [donationPageId], references: [id], onDelete: SetNull, onUpdate:  SetNull)
  payment             Payment?
  createdAt           DateTime?      @default(now())
  updatedAt           DateTime?      @updatedAt
}

model Events {
  id          String             @id @unique @default(uuid())
  title       String
  slug        String             @unique
  description String
  mode        EventMode
  thumbnail   String
  date        DateTime
  attendee    User[]
  status      RegistrationStatus
  createdAt   DateTime?          @default(now())
  updatedAt   DateTime?          @updatedAt
  Attendee    Attendee[]
}

model Attendee {
  id        String    @id @unique @default(uuid())
  UserId    User      @relation(fields: [userId], references: [id])
  EventsId  Events    @relation(fields: [eventsId], references: [id])
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  userId    String
  payment   Payment?
  eventsId  String
}

model Payment {
  id            String        @id @unique @default(uuid())
  transactionId String        @unique
  amount        Int
  status        PaymentStatus
  paymentDate   DateTime
  receiptUrl    String
  createdAt     DateTime?     @default(now())
  updatedAt     DateTime?     @updatedAt
  attendeeId    String?       @unique
  Attendee      Attendee?     @relation(fields: [attendeeId], references: [id])
  donationId    String        @unique
  DonationId    Donation      @relation(fields: [donationId], references: [id])
}

enum EventMode {
  ONLINE
  OFFLINE
}

enum RegistrationStatus {
  COMPLETED
  ONGOING
  EXPIRED
}

enum PaymentStatus {
  PROCESSING
  SUCCESS
  FAILED
}

enum DonationStatus {
  ACTIVE
  EXPIRED
  COMPLETED
  POSTPONE
}

enum Role {
  USER
  ADMIN
  EDITOR
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}
